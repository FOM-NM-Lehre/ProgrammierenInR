<!--

# Das Tidyverse - lubridate

-->

## Datum mit dem Paket `lubridate`

Die _R_-Bibliothek [`lubridate`](http://lubridate.tidyverse.org) wird verwendet, um Datums- und Zeitangaben einfach zu verarbeiten und zu manipulieren. 

```{webr-r}
#| warning: false
#| autorun: true
library(lubridate)
```

`Lubridate` nutzt für Datums/Zeit-Angaben die Form "datetime". Dabei wird aus Jahr, Monat, Tag, Stunde, Minute, Sekunde eine standardisierte Zeichenkette erzeugt.

Im Beispiel wollen wir die Datetime vom 25. Oktober 2025 um 14 Uhr 2 Minuten und 1 Sekunde erzeugt:

```{webr-r}
#| autorun: true
make_datetime(year = 1971, month = 10, day = 25, hour = 14, min = 2, sec=1)
```

Dabei wandelt der Befehle `make_datetime()` die Angaben um.

Wollen wir das Jahr ändern, so können wir das wie folgt machen

```{webr-r}
#| autorun: true
datetime <- make_datetime(year = 1971, month = 10, day = 25, hour = 14, min = 2, sec=1)
year(datetime) <- 2025
datetime
```



## Bestimmung des Wochentags mit `wday()`

Mit den Befehl `wday()` können wir nun bestimmen was für ein Wochentag es war:

::: {.columns}
::: {.column width="49%"}
```{webr-r}
#| autorun: true
datetime <- make_datetime(year = 1971, month = 10, day = 25, hour = 14, min = 2, sec=1)
wday(datetime)
```
```{webr-r}
#| autorun: true
wday(datetime, label = TRUE)
```
```{webr-r}
#| autorun: true
wday(datetime, label = TRUE, abbr = FALSE)
```
```{webr-r}
#| autorun: true
wday(datetime, label = TRUE, abbr = FALSE, locale = "de_DE.UTF-8")
```
:::
::: {.column width="49%"}
```{webr-r}
#| autorun: true
year(datetime) <- 2025
wday(datetime)
Sys.getlocale("LC_TIME")
```
```{webr-r}
#| autorun: true
wday(datetime, label = TRUE)
```
```{webr-r}
#| autorun: true
wday(datetime, label = TRUE, abbr = FALSE)
```
```{webr-r}
#| autorun: true
wday(datetime, label = TRUE, abbr = FALSE, locale = "de_DE.UTF-8")
```

:::
:::


## Vorbereitung

Wir schauen uns jetzt nur die Flüge im Januar an und fügen den Wochentag (*wday*) und die Abflugszeit (*dep_datetime*) hinzu:

```{webr-r}
#| warning: false
#| autorun: true
flights |> 
    filter(month == 1) |>
    mutate(
        dep_datetime = make_datetime(year, month, day, hour, minute),
        wday = wday(dep_datetime, label = TRUE, locale="de_DE")) -> jan_flights

head(jan_flights)
```


## Säulendiagramm: Flüge nach Wochentag im Januar

```{webr-r}
#| warning: false
#| autorun: true
ggplot(jan_flights, aes(x = wday)) +
  geom_bar(fill = "coral") +
  labs(title = "Flüge nach Wochentag im Januar", x = "Wochentag", y = "Anzahl Flüge")
```


## Streudiagramm Ankunfts- vs. Abflugverzögerungen im Januar

```{webr-r}
#| warning: false
#| autorun: true
ggplot(jan_flights, 
       aes(x = dep_delay, y = arr_delay, color = carrier)) +
  geom_point(alpha = 0.5) +
  labs(title = "Ankunfts- vs. Abflugverzögerungen im Januar", 
       x = "Abflugverspätung (in Minuten)", 
       y = "Ankunftsverspätung (in Minuten)")
```


## Aufgaben {.Übung}

1. Erstellen Sie eine Tabelle für den August mit dem Namen *aug_flights*

2. Fügen Sie von den Fluggesellschaftskürzeln auch die entsprechenden Namen der Fluggesellschaften in die Tabelle *aug_flights* ein.

3. Geben Sie die Anzahl der Flüge im August nach Wochentagen sortiert als Säulendiagramm aus.

